# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: src/proto/audioout.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import src.proto.audioout_pb2


class AudiooutServiceBase(abc.ABC):

    @abc.abstractmethod
    async def Play(self, stream: 'grpclib.server.Stream[src.proto.audioout_pb2.PlayRequest, src.proto.audioout_pb2.PlayResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Stop(self, stream: 'grpclib.server.Stream[src.proto.audioout_pb2.StopRequest, src.proto.audioout_pb2.StopResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/viamlabs.service.audioout.v1.AudiooutService/Play': grpclib.const.Handler(
                self.Play,
                grpclib.const.Cardinality.UNARY_UNARY,
                src.proto.audioout_pb2.PlayRequest,
                src.proto.audioout_pb2.PlayResponse,
            ),
            '/viamlabs.service.audioout.v1.AudiooutService/Stop': grpclib.const.Handler(
                self.Stop,
                grpclib.const.Cardinality.UNARY_UNARY,
                src.proto.audioout_pb2.StopRequest,
                src.proto.audioout_pb2.StopResponse,
            ),
        }


class AudiooutServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Play = grpclib.client.UnaryUnaryMethod(
            channel,
            '/viamlabs.service.audioout.v1.AudiooutService/Play',
            src.proto.audioout_pb2.PlayRequest,
            src.proto.audioout_pb2.PlayResponse,
        )
        self.Stop = grpclib.client.UnaryUnaryMethod(
            channel,
            '/viamlabs.service.audioout.v1.AudiooutService/Stop',
            src.proto.audioout_pb2.StopRequest,
            src.proto.audioout_pb2.StopResponse,
        )
